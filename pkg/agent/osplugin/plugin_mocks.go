// /*
// Copyright Â© 2022 - 2023 SUSE LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher-sandbox/cluster-api-provider-elemental/pkg/agent/osplugin (interfaces: Loader,Plugin)
//
// Generated by this command:
//
//	mockgen -copyright_file=hack/boilerplate.go.txt -destination=pkg/agent/osplugin/plugin_mocks.go -package=osplugin github.com/rancher-sandbox/cluster-api-provider-elemental/pkg/agent/osplugin Loader,Plugin
//
// Package osplugin is a generated GoMock package.
package osplugin

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLoader is a mock of Loader interface.
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance.
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockLoader) Load(arg0 string) (Plugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(Plugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockLoaderMockRecorder) Load(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockLoader)(nil).Load), arg0)
}

// MockPlugin is a mock of Plugin interface.
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin.
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance.
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// GetHostname mocks base method.
func (m *MockPlugin) GetHostname() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostname")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostname indicates an expected call of GetHostname.
func (mr *MockPluginMockRecorder) GetHostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostname", reflect.TypeOf((*MockPlugin)(nil).GetHostname))
}

// Init mocks base method.
func (m *MockPlugin) Init(arg0 PluginContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockPluginMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockPlugin)(nil).Init), arg0)
}

// Install mocks base method.
func (m *MockPlugin) Install(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install.
func (mr *MockPluginMockRecorder) Install(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockPlugin)(nil).Install), arg0)
}

// InstallCloudInit mocks base method.
func (m *MockPlugin) InstallCloudInit(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallCloudInit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallCloudInit indicates an expected call of InstallCloudInit.
func (mr *MockPluginMockRecorder) InstallCloudInit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallCloudInit", reflect.TypeOf((*MockPlugin)(nil).InstallCloudInit), arg0)
}

// InstallFile mocks base method.
func (m *MockPlugin) InstallFile(arg0 []byte, arg1 string, arg2 uint32, arg3, arg4 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallFile", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallFile indicates an expected call of InstallFile.
func (mr *MockPluginMockRecorder) InstallFile(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallFile", reflect.TypeOf((*MockPlugin)(nil).InstallFile), arg0, arg1, arg2, arg3, arg4)
}

// InstallHostname mocks base method.
func (m *MockPlugin) InstallHostname(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallHostname", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallHostname indicates an expected call of InstallHostname.
func (mr *MockPluginMockRecorder) InstallHostname(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallHostname", reflect.TypeOf((*MockPlugin)(nil).InstallHostname), arg0)
}

// PowerOff mocks base method.
func (m *MockPlugin) PowerOff() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOff")
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerOff indicates an expected call of PowerOff.
func (mr *MockPluginMockRecorder) PowerOff() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOff", reflect.TypeOf((*MockPlugin)(nil).PowerOff))
}

// Reboot mocks base method.
func (m *MockPlugin) Reboot() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reboot")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reboot indicates an expected call of Reboot.
func (mr *MockPluginMockRecorder) Reboot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reboot", reflect.TypeOf((*MockPlugin)(nil).Reboot))
}

// Reset mocks base method.
func (m *MockPlugin) Reset(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockPluginMockRecorder) Reset(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockPlugin)(nil).Reset), arg0)
}

// TriggerReset mocks base method.
func (m *MockPlugin) TriggerReset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerReset")
	ret0, _ := ret[0].(error)
	return ret0
}

// TriggerReset indicates an expected call of TriggerReset.
func (mr *MockPluginMockRecorder) TriggerReset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerReset", reflect.TypeOf((*MockPlugin)(nil).TriggerReset))
}
