// /*
// Copyright Â© 2022 - 2023 SUSE LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher-sandbox/cluster-api-provider-elemental/internal/agent/hostname (interfaces: Formatter)
//
// Generated by this command:
//
//	mockgen -copyright_file=hack/boilerplate.go.txt -destination=internal/agent/hostname/hostname_mocks.go -package=hostname github.com/rancher-sandbox/cluster-api-provider-elemental/internal/agent/hostname Formatter
//
// Package hostname is a generated GoMock package.
package hostname

import (
	reflect "reflect"

	v1beta1 "github.com/rancher-sandbox/cluster-api-provider-elemental/api/v1beta1"
	gomock "go.uber.org/mock/gomock"
)

// MockFormatter is a mock of Formatter interface.
type MockFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockFormatterMockRecorder
}

// MockFormatterMockRecorder is the mock recorder for MockFormatter.
type MockFormatterMockRecorder struct {
	mock *MockFormatter
}

// NewMockFormatter creates a new mock instance.
func NewMockFormatter(ctrl *gomock.Controller) *MockFormatter {
	mock := &MockFormatter{ctrl: ctrl}
	mock.recorder = &MockFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFormatter) EXPECT() *MockFormatterMockRecorder {
	return m.recorder
}

// FormatHostname mocks base method.
func (m *MockFormatter) FormatHostname(arg0 v1beta1.Hostname) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatHostname", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatHostname indicates an expected call of FormatHostname.
func (mr *MockFormatterMockRecorder) FormatHostname(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatHostname", reflect.TypeOf((*MockFormatter)(nil).FormatHostname), arg0)
}
