// /*
// Copyright Â© 2022 - 2023 SUSE LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher-sandbox/cluster-api-provider-elemental/internal/agent/host (interfaces: InstallerSelector,Installer)
//
// Generated by this command:
//
//	mockgen -copyright_file=hack/boilerplate.go.txt -destination=internal/agent/host/installer_mocks.go -package=host github.com/rancher-sandbox/cluster-api-provider-elemental/internal/agent/host InstallerSelector,Installer
//
// Package host is a generated GoMock package.
package host

import (
	reflect "reflect"

	config "github.com/rancher-sandbox/cluster-api-provider-elemental/internal/agent/config"
	api "github.com/rancher-sandbox/cluster-api-provider-elemental/internal/api"
	vfs "github.com/twpayne/go-vfs"
	gomock "go.uber.org/mock/gomock"
)

// MockInstallerSelector is a mock of InstallerSelector interface.
type MockInstallerSelector struct {
	ctrl     *gomock.Controller
	recorder *MockInstallerSelectorMockRecorder
}

// MockInstallerSelectorMockRecorder is the mock recorder for MockInstallerSelector.
type MockInstallerSelectorMockRecorder struct {
	mock *MockInstallerSelector
}

// NewMockInstallerSelector creates a new mock instance.
func NewMockInstallerSelector(ctrl *gomock.Controller) *MockInstallerSelector {
	mock := &MockInstallerSelector{ctrl: ctrl}
	mock.recorder = &MockInstallerSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstallerSelector) EXPECT() *MockInstallerSelectorMockRecorder {
	return m.recorder
}

// GetInstaller mocks base method.
func (m *MockInstallerSelector) GetInstaller(arg0 vfs.FS, arg1 string, arg2 config.Config) (Installer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstaller", arg0, arg1, arg2)
	ret0, _ := ret[0].(Installer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstaller indicates an expected call of GetInstaller.
func (mr *MockInstallerSelectorMockRecorder) GetInstaller(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstaller", reflect.TypeOf((*MockInstallerSelector)(nil).GetInstaller), arg0, arg1, arg2)
}

// MockInstaller is a mock of Installer interface.
type MockInstaller struct {
	ctrl     *gomock.Controller
	recorder *MockInstallerMockRecorder
}

// MockInstallerMockRecorder is the mock recorder for MockInstaller.
type MockInstallerMockRecorder struct {
	mock *MockInstaller
}

// NewMockInstaller creates a new mock instance.
func NewMockInstaller(ctrl *gomock.Controller) *MockInstaller {
	mock := &MockInstaller{ctrl: ctrl}
	mock.recorder = &MockInstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstaller) EXPECT() *MockInstallerMockRecorder {
	return m.recorder
}

// Install mocks base method.
func (m *MockInstaller) Install(arg0 api.RegistrationResponse, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install.
func (mr *MockInstallerMockRecorder) Install(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockInstaller)(nil).Install), arg0, arg1)
}

// Reset mocks base method.
func (m *MockInstaller) Reset(arg0 api.RegistrationResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockInstallerMockRecorder) Reset(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockInstaller)(nil).Reset), arg0)
}

// TriggerReset mocks base method.
func (m *MockInstaller) TriggerReset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerReset")
	ret0, _ := ret[0].(error)
	return ret0
}

// TriggerReset indicates an expected call of TriggerReset.
func (mr *MockInstallerMockRecorder) TriggerReset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerReset", reflect.TypeOf((*MockInstaller)(nil).TriggerReset))
}
